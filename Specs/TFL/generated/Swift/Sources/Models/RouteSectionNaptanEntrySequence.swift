//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//


import Foundation



public class RouteSectionNaptanEntrySequence: Codable, Equatable {
    
    

    
    public var ordinal: Int?
    

    
    public var stopPoint: StopPoint?
    
    
    

    public init(ordinal: Int? = nil, stopPoint: StopPoint? = nil) {
        
        self.ordinal = ordinal
        
        self.stopPoint = stopPoint
        
        
    }

    
    private enum CodingKeys: String, CodingKey {
        
        case ordinal
        
        case stopPoint
        
    }
    

    public required init(from decoder: Decoder) throws {
        
        let container = try decoder.container(keyedBy: CodingKeys.self)

        
        ordinal = try container.decodeIfPresent(.ordinal)
        
        stopPoint = try container.decodeIfPresent(.stopPoint)
        
        
        
        
    }

    public func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: CodingKeys.self)

        
        try container.encodeIfPresent(ordinal, forKey: .ordinal)
        
        try container.encodeIfPresent(stopPoint, forKey: .stopPoint)
        
        
        
        
    }
    

    public func isEqual(to object: Any?) -> Bool {
      
      guard let object = object as? RouteSectionNaptanEntrySequence else { return false }
      
      
      
      guard self.ordinal == object.ordinal else { return false }
      
      
      
      guard self.stopPoint == object.stopPoint else { return false }
      
      
      
      
      return true
      
    }
    

    public static func == (lhs: RouteSectionNaptanEntrySequence, rhs: RouteSectionNaptanEntrySequence) -> Bool {
        return lhs.isEqual(to: rhs)
    }
    
}


